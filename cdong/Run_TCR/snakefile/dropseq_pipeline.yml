
rule fastq_to_bam:
	input: 
		fastq1 = "Input/{plate}/{sample}_R1_001.fastq.gz",
		fastq2 = "Input/{plate}/{sample}_R2_001.fastq.gz"
	output: 
		"output/1_preprocessing/{plate}/{sample}.bam"
	
	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
#		"touch {output}"
		"java -Xmx4g -jar /tools/Drop-seq_tools-1.12/3rdParty/picard/picard.jar FastqToSam FASTQ={input.fastq1} FASTQ2={input.fastq2} O={output} SAMPLE_NAME={wildcards.sample}"

rule tag_cell_barcode:
	input: 
		"output/1_preprocessing/{plate}/{sample}.bam"
	output: 
		# The bam with cell tags
		bam= "output/1_preprocessing/{plate}/{sample}_cellTag.bam",
		# A text file containing process report information
		report= "output/1_preprocessing/{plate}/{sample}_cellTag_report.txt"
	
	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
#		"touch {output.bam};touch {output.report}"
		"/tools/Drop-seq_tools-1.12/TagBamWithReadSequenceExtended SUMMARY={output.report} BASE_RANGE=1-8 BASE_QUALITY=10 BARCODED_READ=2 DISCARD_READ=false TAG_NAME=XC NUM_BASES_BELOW_QUALITY=1 INPUT={input} OUTPUT={output.bam}"

rule tag_molecular_umi:
	input: 
		"output/1_preprocessing/{plate}/{sample}_cellTag.bam"
	output: 
		bam = "output/1_preprocessing/{plate}/{sample}_cellTag_molTag.bam",
		report = "output/1_preprocessing/{plate}/{sample}_cellTag_molTag_report.txt"
	
	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
		"/tools/Drop-seq_tools-1.12/TagBamWithReadSequenceExtended SUMMARY={output.report} BASE_RANGE=9-13 BASE_QUALITY=10 BARCODED_READ=2 DISCARD_READ=true TAG_NAME=XM NUM_BASES_BELOW_QUALITY=1 INPUT={input} OUTPUT={output.bam}"


rule filter_bad_bc_read:
	input:  
		"output/1_preprocessing/{plate}/{sample}_cellTag_molTag.bam"
	output:
		# input Pipeline2 trinity
		"output/1_preprocessing/{plate}/{sample}_cellTag_molTag_filtered.bam"

	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
		"/tools/Drop-seq_tools-1.12/FilterBAM TAG_REJECT=XQ INPUT={input} OUTPUT={output}"


#Control Check. Count number of lines between cellTag_molTag_filtered.bam and cellTag_molTag.bam

rule compare_bam_reads:
	input: 
		filecellTag_molTag = "output/1_preprocessing/{plate}/{sample}_cellTag_molTag.bam",
		filecellTag_molTag_filtered = "output/1_preprocessing/{plate}/{sample}_cellTag_molTag_filtered.bam"
	output:
		"output/1_preprocessing/{plate}/{sample}_cellTag_molTag_filtered_count.txt"
	
	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
		"/tools/Drop-seq_tools-1.12/compare_bam_reads.sh {output} {input.filecellTag_molTag} {input.filecellTag_molTag_filtered}"

rule bam_to_fastq:
	input: 
		"output/1_preprocessing/{plate}/{sample}_cellTag_molTag_filtered.bam"
	output:
		"output/2_preprocessing2/{plate}/{sample}_cellTag_molTag_filtered.fastq"

	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
		"java -Xmx4g -jar /tools/Drop-seq_tools-1.12/3rdParty/picard/picard.jar SamToFastq INPUT={input} FASTQ={output}"

#STAR Alignment HUMAN GENOME (we also output the unmapped reads)

rule star_map:
	input:
		"output/2_preprocessing2/{plate}/{sample}_cellTag_molTag_filtered.fastq"
	output:
		"output/3_Alignment/{plate}/{sample}_Aligned.out.sam"
	#
        #	"logs/star/{sample}.log"
	
	singularity:
        	"simg/tools.img"
	params:
		# ref
		STARGENOMEDIR=config["stargenomeDir"]
	shell:
		"STAR --outReadsUnmapped Fastx --genomeDir {params.STARGENOMEDIR} --outFileNamePrefix output/3_Alignment/{wildcards.plate}/{wildcards.sample}_ --readFilesIn {input}" 

#SortSam queryname for the mapped bam
rule picard_sort_mapped:
	input:
		"output/3_Alignment/{plate}/{sample}_Aligned.out.sam"
	output:
		"output/3_Alignment/{plate}/{sample}_Aligned.out.sorted.bam"

	singularity:
        	"simg/dropseqtools_1.12.img"	
	shell:
		"java -Xmx25g -jar /tools/Drop-seq_tools-1.12/3rdParty/picard/picard.jar SortSam I={input} O={output} SORT_ORDER=queryname"


#SortSam queryname for the unmapped bam
rule picard_sort_unmapped:
	input:
		"output/1_preprocessing/{plate}/{sample}_cellTag_molTag_filtered.bam"
	output:
		"output/2_preprocessing2/{plate}/{sample}_cellTag_molTag_filtered.sorted.bam"

	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
		"java -Xmx25g -jar /tools/Drop-seq_tools-1.12/3rdParty/picard/picard.jar SortSam I={input} O={output} SORT_ORDER=queryname"

#Merge bam alignment with unmapped bam (which contains barcode and UMI)
rule merged_alignment:
	input:
		fileUnmapped = "output/2_preprocessing2/{plate}/{sample}_cellTag_molTag_filtered.sorted.bam",
		fileAligned = "output/3_Alignment/{plate}/{sample}_Aligned.out.sorted.bam"
	output:
		"output/3_Alignment/{plate}/{sample}_merged.bam"

	singularity:
        	"simg/dropseqtools_1.12.img"
	params:
		GENOMEDIR=config["genomeDir"]
	shell:
		"java -Xmx25g -jar /tools/Drop-seq_tools-1.12/3rdParty/picard/picard.jar MergeBamAlignment R={params.GENOMEDIR}/GRCh38_ERCC92.fa UNMAPPED={input.fileUnmapped} ALIGNED={input.fileAligned} O={output} INCLUDE_SECONDARY_ALIGNMENTS=false PAIRED_RUN=false"


#convert merged.bam to sam  #no necessary
rule bam_to_sam:
	input:
		"output/3_Alignment/{plate}/{sample}_merged.bam"
	output:
		"output/3_Alignment/{plate}/{sample}_merged.sam"
	
	singularity:
        	"simg/tools.img"
	shell:	
		"samtools view -h -o {output}  {input}"

rule htseq_count:
	input:
		"output/3_Alignment/{plate}/{sample}_merged.sam"
	output:
		sam = "output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount.sam",
		result="output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount_results.txt"
	singularity:
        	"simg/htseq.img"
	params:
		GENOMEDIR=config["genomeDir"]
	shell:
		"python -m HTSeq.scripts.count --stranded=no --idattr=gene_name {input} {params.GENOMEDIR}/GRCh38_ERCC92.gtf --samout={output.sam} >> {output.result}" #-f bam


#rule changeAtoZ:
#	input:
#		"output/4_ counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount.sam"
#	output:
#		"output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount_ZtoA.sam"
#	shell:
#		"cat {input} | sed s/RG:A:A/RG:Z:A/ > {output}"


#convert star_gene_exon_tagged_HTSeqCount.sam to bam
rule sam_to_bam:
	input:
		"output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount.sam"
	output:
		"output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount.bam"

	singularity:
        	"simg/tools.img"
	params:
		GENOMEDIR=config["genomeDir"]
	shell:
		"samtools view -bT {params.GENOMEDIR}/GRCh38_ERCC92.fa {input} > {output}"

# -----------------------------------------------------------------------------------
# add the right header with reheader
# -----------------------------------------------------------------------------------
rule add_right_header:
	input:
		sam= "output/3_Alignment/{plate}/{sample}_merged.sam",		
		bam= "output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount.bam"
	output:
		"output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount_rightHeader.bam"

	singularity:
        	"simg/tools.img"
	shell:
		"samtools reheader {input.sam} {input.bam} >  {output}"

#A python step to merge the BC with a mismatch of 1 (plus rapid sur ma machine)
rule modify_barcode:
	input: 
		bcseq2ndset_txt = config["bcfile"],
		bam ="output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount_rightHeader.bam"
	output:
		"output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount_rightHeader_modifiedBC.bam"

	singularity:
        	"simg/tools.img"
	shell:		
		"python script/ModifyBarcodeInBam_2ndSetBC.py {input.bam} {input.bcseq2ndset_txt} {output}" #change le script


####################################block########################################################

#DetectBeadSynthesisErrors (on HTSeq-count output)
rule detect_errors:
	input:
		"output/4_counting/{plate}/{sample}_gene_exon_tagged_HTSeqCount_rightHeader_modifiedBC.bam"
	output:
		bam = "output/5_dgsummary/{plate}/{sample}_merged_clean_HTSeqCount_modifiedBC.bam",
		stats = "output/5_dgsummary/{plate}/{sample}.synthesis_stats_HTSeqCount_modifiedBC.txt",
		summary = "output/5_dgsummary/{plate}/{sample}.synthesis_stats.summary_HTSeqCount_modifiedBC.txt"
	
	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
		"/tools/Drop-seq_tools-1.12/DetectBeadSynthesisErrors I={input} O={output.bam} OUTPUT_STATS={output.stats} SUMMARY={output.summary} MAX_NUM_ERRORS=0 NUM_BARCODES=2000 MIN_UMIS_PER_CELL=1 GENE_EXON_TAG=XF"



##################################################################
#DigitalExpression (on HTSeq-count output) TRANSCRIPT
rule summary_matrix_transcript:
	input:
		"output/5_dgsummary/{plate}/{sample}_merged_clean_HTSeqCount_modifiedBC.bam"
	output:
		summary = "output/5_dgsummary/{plate}/{sample}_dge_summary_HTSeqCount_modifiedBC_transcript.txt",
		results = "output/5_dgsummary/{plate}/{sample}_dge_results_HTSeqCount_modifiedBC_transcript.txt"

	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
		"/tools/Drop-seq_tools-1.12/DigitalExpression I={input} SUMMARY={output.summary} O={output.results} NUM_CORE_BARCODES=2000 GENE_EXON_TAG=XF USE_STRAND_INFO=false OUTPUT_READS_INSTEAD=true"

#DigitalExpression (on HTSeq-count output) UMI EDIT_DISTANCE=0 RARE_UMI_FILTER=0.01 from Islam
rule summary_matrix_umi:
	input:
		"output/5_dgsummary/{plate}/{sample}_merged_clean_HTSeqCount_modifiedBC.bam"
	output:
		summary = "output/5_dgsummary/{plate}/{sample}_dge_summary_HTSeqCount_modifiedBC_UMI_EditDistance0_IslamFilter.txt",
		results = "output/5_dgsummary/{plate}/{sample}_dge_results_HTSeqCount_modifiedBC_UMI_EditDistance0_IslamFilter.txt"

	singularity:
        	"simg/dropseqtools_1.12.img"
	shell:
		"/tools/Drop-seq_tools-1.12/DigitalExpression I={input} SUMMARY={output.summary} O={output.results} NUM_CORE_BARCODES=2000 GENE_EXON_TAG=XF USE_STRAND_INFO=false OUTPUT_READS_INSTEAD=false EDIT_DISTANCE=0 RARE_UMI_FILTER_THRESHOLD=0.01"

#########################################
end_time = datetime.now()
#
print('Duration dropseq: {}'.format(end_time - start_time))




